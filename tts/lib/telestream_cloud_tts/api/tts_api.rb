=begin
#Tts API

#Description

OpenAPI spec version: 2.0.0
Contact: cloudsupport@telestream.net
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.0

=end

require "uri"

module TelestreamCloud::Tts
  class TtsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Returns a collection of Corpora
    # Returns a collection of Corpora
    # @param project_id ID of the Project
    # @param [Hash] opts the optional parameters
    # @return [CorporaCollection]
    def corpora(project_id, opts = {})
      data, _status_code, _headers = corpora_with_http_info(project_id, opts)
      return data
    end

    # Returns a collection of Corpora
    # Returns a collection of Corpora
    # @param project_id ID of the Project
    # @param [Hash] opts the optional parameters
    # @return [Array<(CorporaCollection, Fixnum, Hash)>] CorporaCollection data, response status code and response headers
    def corpora_with_http_info(project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TtsApi.corpora ..."
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling TtsApi.corpora"
      end
      # resource path
      local_var_path = "/projects/{projectID}/corpora".sub('{' + 'projectID' + '}', project_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CorporaCollection')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TtsApi#corpora\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns the Corpus
    # Returns the Corpus
    # @param project_id ID of the Project
    # @param name Corpus name
    # @param [Hash] opts the optional parameters
    # @return [Corpus]
    def corpus(project_id, name, opts = {})
      data, _status_code, _headers = corpus_with_http_info(project_id, name, opts)
      return data
    end

    # Returns the Corpus
    # Returns the Corpus
    # @param project_id ID of the Project
    # @param name Corpus name
    # @param [Hash] opts the optional parameters
    # @return [Array<(Corpus, Fixnum, Hash)>] Corpus data, response status code and response headers
    def corpus_with_http_info(project_id, name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TtsApi.corpus ..."
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling TtsApi.corpus"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling TtsApi.corpus"
      end
      # resource path
      local_var_path = "/projects/{projectID}/corpora/{name}".sub('{' + 'projectID' + '}', project_id.to_s).sub('{' + 'name' + '}', name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Corpus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TtsApi#corpus\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creates a new Corpus
    # Creates a new Corpus
    # @param project_id ID of the Project
    # @param name Corpus name
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def create_corpus(project_id, name, body, opts = {})
      create_corpus_with_http_info(project_id, name, body, opts)
      return nil
    end

    # Creates a new Corpus
    # Creates a new Corpus
    # @param project_id ID of the Project
    # @param name Corpus name
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_corpus_with_http_info(project_id, name, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TtsApi.create_corpus ..."
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling TtsApi.create_corpus"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling TtsApi.create_corpus"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling TtsApi.create_corpus"
      end
      # resource path
      local_var_path = "/projects/{projectID}/corpora/{name}".sub('{' + 'projectID' + '}', project_id.to_s).sub('{' + 'name' + '}', name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['text/plain'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['apiKey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TtsApi#create_corpus\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creates a new Job
    # Creates a new Job
    # @param project_id ID of the Project
    # @param job 
    # @param [Hash] opts the optional parameters
    # @return [Job]
    def create_job(project_id, job, opts = {})
      data, _status_code, _headers = create_job_with_http_info(project_id, job, opts)
      return data
    end

    # Creates a new Job
    # Creates a new Job
    # @param project_id ID of the Project
    # @param job 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Job, Fixnum, Hash)>] Job data, response status code and response headers
    def create_job_with_http_info(project_id, job, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TtsApi.create_job ..."
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling TtsApi.create_job"
      end
      # verify the required parameter 'job' is set
      if @api_client.config.client_side_validation && job.nil?
        fail ArgumentError, "Missing the required parameter 'job' when calling TtsApi.create_job"
      end
      # resource path
      local_var_path = "/projects/{projectID}/jobs".sub('{' + 'projectID' + '}', project_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(job)
      auth_names = ['apiKey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Job')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TtsApi#create_job\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creates a new Project
    # Creates a new Project
    # @param project 
    # @param [Hash] opts the optional parameters
    # @return [Project]
    def create_project(project, opts = {})
      data, _status_code, _headers = create_project_with_http_info(project, opts)
      return data
    end

    # Creates a new Project
    # Creates a new Project
    # @param project 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Project, Fixnum, Hash)>] Project data, response status code and response headers
    def create_project_with_http_info(project, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TtsApi.create_project ..."
      end
      # verify the required parameter 'project' is set
      if @api_client.config.client_side_validation && project.nil?
        fail ArgumentError, "Missing the required parameter 'project' when calling TtsApi.create_project"
      end
      # resource path
      local_var_path = "/projects"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(project)
      auth_names = ['apiKey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Project')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TtsApi#create_project\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creates a new Corpus
    # Creates a new Corpus
    # @param project_id ID of the Project
    # @param name Corpus name
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_corpus(project_id, name, opts = {})
      delete_corpus_with_http_info(project_id, name, opts)
      return nil
    end

    # Creates a new Corpus
    # Creates a new Corpus
    # @param project_id ID of the Project
    # @param name Corpus name
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_corpus_with_http_info(project_id, name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TtsApi.delete_corpus ..."
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling TtsApi.delete_corpus"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling TtsApi.delete_corpus"
      end
      # resource path
      local_var_path = "/projects/{projectID}/corpora/{name}".sub('{' + 'projectID' + '}', project_id.to_s).sub('{' + 'name' + '}', name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKey']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TtsApi#delete_corpus\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deletes the Job
    # Deletes the Job
    # @param project_id ID of the Project
    # @param job_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_job(project_id, job_id, opts = {})
      delete_job_with_http_info(project_id, job_id, opts)
      return nil
    end

    # Deletes the Job
    # Deletes the Job
    # @param project_id ID of the Project
    # @param job_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_job_with_http_info(project_id, job_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TtsApi.delete_job ..."
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling TtsApi.delete_job"
      end
      # verify the required parameter 'job_id' is set
      if @api_client.config.client_side_validation && job_id.nil?
        fail ArgumentError, "Missing the required parameter 'job_id' when calling TtsApi.delete_job"
      end
      # resource path
      local_var_path = "/projects/{projectID}/jobs/{id}".sub('{' + 'projectID' + '}', project_id.to_s).sub('{' + 'job_id' + '}', job_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKey']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TtsApi#delete_job\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deletes the Project
    # Deletes the Project
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_project(opts = {})
      delete_project_with_http_info(opts)
      return nil
    end

    # Deletes the Project
    # Deletes the Project
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_project_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TtsApi.delete_project ..."
      end
      # resource path
      local_var_path = "/projects/{projectID}"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKey']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TtsApi#delete_project\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns the Job
    # Returns the Job
    # @param project_id ID of the Project
    # @param job_id 
    # @param [Hash] opts the optional parameters
    # @return [Job]
    def job(project_id, job_id, opts = {})
      data, _status_code, _headers = job_with_http_info(project_id, job_id, opts)
      return data
    end

    # Returns the Job
    # Returns the Job
    # @param project_id ID of the Project
    # @param job_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Job, Fixnum, Hash)>] Job data, response status code and response headers
    def job_with_http_info(project_id, job_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TtsApi.job ..."
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling TtsApi.job"
      end
      # verify the required parameter 'job_id' is set
      if @api_client.config.client_side_validation && job_id.nil?
        fail ArgumentError, "Missing the required parameter 'job_id' when calling TtsApi.job"
      end
      # resource path
      local_var_path = "/projects/{projectID}/jobs/{id}".sub('{' + 'projectID' + '}', project_id.to_s).sub('{' + 'job_id' + '}', job_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Job')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TtsApi#job\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns the Job Result
    # Returns the Job Result
    # @param project_id ID of the Project
    # @param job_id 
    # @param [Hash] opts the optional parameters
    # @return [JobResult]
    def job_result(project_id, job_id, opts = {})
      data, _status_code, _headers = job_result_with_http_info(project_id, job_id, opts)
      return data
    end

    # Returns the Job Result
    # Returns the Job Result
    # @param project_id ID of the Project
    # @param job_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(JobResult, Fixnum, Hash)>] JobResult data, response status code and response headers
    def job_result_with_http_info(project_id, job_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TtsApi.job_result ..."
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling TtsApi.job_result"
      end
      # verify the required parameter 'job_id' is set
      if @api_client.config.client_side_validation && job_id.nil?
        fail ArgumentError, "Missing the required parameter 'job_id' when calling TtsApi.job_result"
      end
      # resource path
      local_var_path = "/projects/{projectID}/jobs/{id}/result".sub('{' + 'projectID' + '}', project_id.to_s).sub('{' + 'job_id' + '}', job_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'JobResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TtsApi#job_result\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns a collection of Jobs
    # Returns a collection of Jobs
    # @param project_id ID of the Project
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page page number
    # @option opts [Integer] :per_page number of records per page
    # @return [JobsCollection]
    def jobs(project_id, opts = {})
      data, _status_code, _headers = jobs_with_http_info(project_id, opts)
      return data
    end

    # Returns a collection of Jobs
    # Returns a collection of Jobs
    # @param project_id ID of the Project
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page page number
    # @option opts [Integer] :per_page number of records per page
    # @return [Array<(JobsCollection, Fixnum, Hash)>] JobsCollection data, response status code and response headers
    def jobs_with_http_info(project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TtsApi.jobs ..."
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling TtsApi.jobs"
      end
      # resource path
      local_var_path = "/projects/{projectID}/jobs".sub('{' + 'projectID' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'JobsCollection')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TtsApi#jobs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns the Project
    # Returns the Project
    # @param project_id ID of the Project
    # @param [Hash] opts the optional parameters
    # @return [Project]
    def project(project_id, opts = {})
      data, _status_code, _headers = project_with_http_info(project_id, opts)
      return data
    end

    # Returns the Project
    # Returns the Project
    # @param project_id ID of the Project
    # @param [Hash] opts the optional parameters
    # @return [Array<(Project, Fixnum, Hash)>] Project data, response status code and response headers
    def project_with_http_info(project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TtsApi.project ..."
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling TtsApi.project"
      end
      # resource path
      local_var_path = "/projects/{projectID}".sub('{' + 'projectID' + '}', project_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Project')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TtsApi#project\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns a collection of Projects
    # Returns a collection of Projects
    # @param [Hash] opts the optional parameters
    # @return [ProjectsCollection]
    def projects(opts = {})
      data, _status_code, _headers = projects_with_http_info(opts)
      return data
    end

    # Returns a collection of Projects
    # Returns a collection of Projects
    # @param [Hash] opts the optional parameters
    # @return [Array<(ProjectsCollection, Fixnum, Hash)>] ProjectsCollection data, response status code and response headers
    def projects_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TtsApi.projects ..."
      end
      # resource path
      local_var_path = "/projects"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ProjectsCollection')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TtsApi#projects\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Queues training
    # Queues training
    # @param project_id ID of the Project
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def train_project(project_id, opts = {})
      train_project_with_http_info(project_id, opts)
      return nil
    end

    # Queues training
    # Queues training
    # @param project_id ID of the Project
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def train_project_with_http_info(project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TtsApi.train_project ..."
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling TtsApi.train_project"
      end
      # resource path
      local_var_path = "/projects/{projectID}/train".sub('{' + 'projectID' + '}', project_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TtsApi#train_project\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Updates an existing Project
    # Updates an existing Project
    # @param project 
    # @param [Hash] opts the optional parameters
    # @return [Project]
    def update_project(project, opts = {})
      data, _status_code, _headers = update_project_with_http_info(project, opts)
      return data
    end

    # Updates an existing Project
    # Updates an existing Project
    # @param project 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Project, Fixnum, Hash)>] Project data, response status code and response headers
    def update_project_with_http_info(project, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TtsApi.update_project ..."
      end
      # verify the required parameter 'project' is set
      if @api_client.config.client_side_validation && project.nil?
        fail ArgumentError, "Missing the required parameter 'project' when calling TtsApi.update_project"
      end
      # resource path
      local_var_path = "/projects/{projectID}"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(project)
      auth_names = ['apiKey']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Project')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TtsApi#update_project\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creates an upload session
    # 
    # @param project_id ID of the Project
    # @param video_upload_body 
    # @param [Hash] opts the optional parameters
    # @return [UploadSession]
    def upload_video(project_id, video_upload_body, opts = {})
      data, _status_code, _headers = upload_video_with_http_info(project_id, video_upload_body, opts)
      return data
    end

    # Creates an upload session
    # 
    # @param project_id ID of the Project
    # @param video_upload_body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UploadSession, Fixnum, Hash)>] UploadSession data, response status code and response headers
    def upload_video_with_http_info(project_id, video_upload_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TtsApi.upload_video ..."
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling TtsApi.upload_video"
      end
      # verify the required parameter 'video_upload_body' is set
      if @api_client.config.client_side_validation && video_upload_body.nil?
        fail ArgumentError, "Missing the required parameter 'video_upload_body' when calling TtsApi.upload_video"
      end
      # resource path
      local_var_path = "/projects/{projectID}/jobs/upload".sub('{' + 'projectID' + '}', project_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(video_upload_body)
      auth_names = ['apiKey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UploadSession')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TtsApi#upload_video\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
