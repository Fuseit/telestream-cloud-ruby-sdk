=begin
#Tts API

#Description

OpenAPI spec version: 3.1.0
Contact: cloudsupport@telestream.net
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.0

=end

require 'spec_helper'
require 'json'

# Unit tests for TelestreamCloud::Tts::TtsApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'TtsApi' do
  before do
    # run before each test
    @instance = TelestreamCloud::Tts::TtsApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of TtsApi' do
    it 'should create an instance of TtsApi' do
      expect(@instance).to be_instance_of(TelestreamCloud::Tts::TtsApi)
    end
  end

  # unit tests for corpora
  # Returns a collection of Corpora
  # Returns a collection of Corpora
  # @param project_id ID of the Project
  # @param [Hash] opts the optional parameters
  # @return [CorporaCollection]
  describe 'corpora test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for corpus
  # Returns the Corpus
  # Returns the Corpus
  # @param project_id ID of the Project
  # @param name Corpus name
  # @param [Hash] opts the optional parameters
  # @return [Corpus]
  describe 'corpus test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_corpus
  # Creates a new Corpus
  # Creates a new Corpus
  # @param project_id ID of the Project
  # @param name Corpus name
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'create_corpus test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_job
  # Creates a new Job
  # Creates a new Job
  # @param project_id ID of the Project
  # @param job 
  # @param [Hash] opts the optional parameters
  # @return [Job]
  describe 'create_job test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_project
  # Creates a new Project
  # Creates a new Project
  # @param project 
  # @param [Hash] opts the optional parameters
  # @return [Project]
  describe 'create_project test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_corpus
  # Creates a new Corpus
  # Creates a new Corpus
  # @param project_id ID of the Project
  # @param name Corpus name
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_corpus test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_job
  # Deletes the Job
  # Deletes the Job
  # @param project_id ID of the Project
  # @param job_id 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_job test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_project
  # Deletes the Project
  # Deletes the Project
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_project test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for job
  # Returns the Job
  # Returns the Job
  # @param project_id ID of the Project
  # @param job_id 
  # @param [Hash] opts the optional parameters
  # @return [Job]
  describe 'job test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for job_result
  # Returns the Job Result
  # Returns the Job Result
  # @param project_id ID of the Project
  # @param job_id 
  # @param [Hash] opts the optional parameters
  # @return [JobResult]
  describe 'job_result test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for jobs
  # Returns a collection of Jobs
  # Returns a collection of Jobs
  # @param project_id ID of the Project
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page page number
  # @option opts [Integer] :per_page number of records per page
  # @return [JobsCollection]
  describe 'jobs test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for project
  # Returns the Project
  # Returns the Project
  # @param project_id ID of the Project
  # @param [Hash] opts the optional parameters
  # @return [Project]
  describe 'project test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for projects
  # Returns a collection of Projects
  # Returns a collection of Projects
  # @param [Hash] opts the optional parameters
  # @return [ProjectsCollection]
  describe 'projects test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for train_project
  # Queues training
  # Queues training
  # @param project_id ID of the Project
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'train_project test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_project
  # Updates an existing Project
  # Updates an existing Project
  # @param project 
  # @param [Hash] opts the optional parameters
  # @return [Project]
  describe 'update_project test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for upload_video
  # Creates an upload session
  # 
  # @param project_id ID of the Project
  # @param video_upload_body 
  # @param [Hash] opts the optional parameters
  # @return [UploadSession]
  describe 'upload_video test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
