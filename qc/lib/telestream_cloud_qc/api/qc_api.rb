=begin
#Qc API

#QC API

OpenAPI spec version: 2.0.0
Contact: cloudsupport@telestream.net
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.0

=end

require "uri"

module TelestreamCloud::Qc
  class QcApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # 
    # 
    # @param project_id A unique identifier of a Project.
    # @param job_id A unique identifier of a Job.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def cancel_job(project_id, job_id, opts = {})
      cancel_job_with_http_info(project_id, job_id, opts)
      return nil
    end

    # 
    # 
    # @param project_id A unique identifier of a Project.
    # @param job_id A unique identifier of a Job.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def cancel_job_with_http_info(project_id, job_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: QcApi.cancel_job ..."
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling QcApi.cancel_job"
      end
      # verify the required parameter 'job_id' is set
      if @api_client.config.client_side_validation && job_id.nil?
        fail ArgumentError, "Missing the required parameter 'job_id' when calling QcApi.cancel_job"
      end
      # resource path
      local_var_path = "/projects/{project_id}/jobs/{job_id}/cancel.json".sub('{' + 'project_id' + '}', project_id.to_s).sub('{' + 'job_id' + '}', job_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKey']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QcApi#cancel_job\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a new job
    # 
    # @param project_id A unique identifier of a Project.
    # @param data 
    # @param [Hash] opts the optional parameters
    # @return [Job]
    def create_job(project_id, data, opts = {})
      data, _status_code, _headers = create_job_with_http_info(project_id, data, opts)
      return data
    end

    # Create a new job
    # 
    # @param project_id A unique identifier of a Project.
    # @param data 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Job, Fixnum, Hash)>] Job data, response status code and response headers
    def create_job_with_http_info(project_id, data, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: QcApi.create_job ..."
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling QcApi.create_job"
      end
      # verify the required parameter 'data' is set
      if @api_client.config.client_side_validation && data.nil?
        fail ArgumentError, "Missing the required parameter 'data' when calling QcApi.create_job"
      end
      # resource path
      local_var_path = "/projects/{project_id}/jobs.json".sub('{' + 'project_id' + '}', project_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(data)
      auth_names = ['apiKey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Job')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QcApi#create_job\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a new project
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Data] :data 
    # @return [Project]
    def create_project(opts = {})
      data, _status_code, _headers = create_project_with_http_info(opts)
      return data
    end

    # Create a new project
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Data] :data 
    # @return [Array<(Project, Fixnum, Hash)>] Project data, response status code and response headers
    def create_project_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: QcApi.create_project ..."
      end
      # resource path
      local_var_path = "/projects.json"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'data'])
      auth_names = ['apiKey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Project')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QcApi#create_project\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get QC job
    # 
    # @param project_id A unique identifier of a Project.
    # @param job_id A unique identifier of a Job.
    # @param [Hash] opts the optional parameters
    # @return [Job]
    def get_job(project_id, job_id, opts = {})
      data, _status_code, _headers = get_job_with_http_info(project_id, job_id, opts)
      return data
    end

    # Get QC job
    # 
    # @param project_id A unique identifier of a Project.
    # @param job_id A unique identifier of a Job.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Job, Fixnum, Hash)>] Job data, response status code and response headers
    def get_job_with_http_info(project_id, job_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: QcApi.get_job ..."
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling QcApi.get_job"
      end
      # verify the required parameter 'job_id' is set
      if @api_client.config.client_side_validation && job_id.nil?
        fail ArgumentError, "Missing the required parameter 'job_id' when calling QcApi.get_job"
      end
      # resource path
      local_var_path = "/projects/{project_id}/jobs/{job_id}.json".sub('{' + 'project_id' + '}', project_id.to_s).sub('{' + 'job_id' + '}', job_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Job')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QcApi#get_job\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get project by Id
    # 
    # @param project_id A unique identifier of a Project.
    # @param [Hash] opts the optional parameters
    # @return [Project]
    def get_project(project_id, opts = {})
      data, _status_code, _headers = get_project_with_http_info(project_id, opts)
      return data
    end

    # Get project by Id
    # 
    # @param project_id A unique identifier of a Project.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Project, Fixnum, Hash)>] Project data, response status code and response headers
    def get_project_with_http_info(project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: QcApi.get_project ..."
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling QcApi.get_project"
      end
      # resource path
      local_var_path = "/projects/{project_id}.json".sub('{' + 'project_id' + '}', project_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Project')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QcApi#get_project\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get jobs form projects
    # 
    # @param project_id A unique identifier of a Project.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :expand Expand details of job
    # @option opts [String] :status Filter jobs by status
    # @option opts [Integer] :per_page Limit number of listed jobs (default to 30)
    # @option opts [Integer] :page Index of jobs page to be listed
    # @return [JobsCollection]
    def list_jobs(project_id, opts = {})
      data, _status_code, _headers = list_jobs_with_http_info(project_id, opts)
      return data
    end

    # Get jobs form projects
    # 
    # @param project_id A unique identifier of a Project.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :expand Expand details of job
    # @option opts [String] :status Filter jobs by status
    # @option opts [Integer] :per_page Limit number of listed jobs
    # @option opts [Integer] :page Index of jobs page to be listed
    # @return [Array<(JobsCollection, Fixnum, Hash)>] JobsCollection data, response status code and response headers
    def list_jobs_with_http_info(project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: QcApi.list_jobs ..."
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling QcApi.list_jobs"
      end
      # resource path
      local_var_path = "/projects/{project_id}/jobs.json".sub('{' + 'project_id' + '}', project_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'expand'] = opts[:'expand'] if !opts[:'expand'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'JobsCollection')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QcApi#list_jobs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List all projects for an account
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<Project>]
    def list_projects(opts = {})
      data, _status_code, _headers = list_projects_with_http_info(opts)
      return data
    end

    # List all projects for an account
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Project>, Fixnum, Hash)>] Array<Project> data, response status code and response headers
    def list_projects_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: QcApi.list_projects ..."
      end
      # resource path
      local_var_path = "/projects.json"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Project>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QcApi#list_projects\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Modify project
    # 
    # @param project_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Data1] :data 
    # @return [Project]
    def modify_project(project_id, opts = {})
      data, _status_code, _headers = modify_project_with_http_info(project_id, opts)
      return data
    end

    # Modify project
    # 
    # @param project_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Data1] :data 
    # @return [Array<(Project, Fixnum, Hash)>] Project data, response status code and response headers
    def modify_project_with_http_info(project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: QcApi.modify_project ..."
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling QcApi.modify_project"
      end
      # resource path
      local_var_path = "/projects/{project_id}.json".sub('{' + 'project_id' + '}', project_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'data'])
      auth_names = ['apiKey']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Project')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QcApi#modify_project\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param project_id A unique identifier of a Project.
    # @param job_id A unique identifier of a Job.
    # @param [Hash] opts the optional parameters
    # @return [Proxy]
    def proxy(project_id, job_id, opts = {})
      data, _status_code, _headers = proxy_with_http_info(project_id, job_id, opts)
      return data
    end

    # 
    # 
    # @param project_id A unique identifier of a Project.
    # @param job_id A unique identifier of a Job.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Proxy, Fixnum, Hash)>] Proxy data, response status code and response headers
    def proxy_with_http_info(project_id, job_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: QcApi.proxy ..."
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling QcApi.proxy"
      end
      # verify the required parameter 'job_id' is set
      if @api_client.config.client_side_validation && job_id.nil?
        fail ArgumentError, "Missing the required parameter 'job_id' when calling QcApi.proxy"
      end
      # resource path
      local_var_path = "/projects/{project_id}/jobs/{job_id}/proxy.json".sub('{' + 'project_id' + '}', project_id.to_s).sub('{' + 'job_id' + '}', job_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Proxy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QcApi#proxy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param project_id A unique identifier of a Project.
    # @param job_id A unique identifier of a Job.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def remove_job(project_id, job_id, opts = {})
      remove_job_with_http_info(project_id, job_id, opts)
      return nil
    end

    # 
    # 
    # @param project_id A unique identifier of a Project.
    # @param job_id A unique identifier of a Job.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def remove_job_with_http_info(project_id, job_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: QcApi.remove_job ..."
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling QcApi.remove_job"
      end
      # verify the required parameter 'job_id' is set
      if @api_client.config.client_side_validation && job_id.nil?
        fail ArgumentError, "Missing the required parameter 'job_id' when calling QcApi.remove_job"
      end
      # resource path
      local_var_path = "/projects/{project_id}/jobs/{job_id}.json".sub('{' + 'project_id' + '}', project_id.to_s).sub('{' + 'job_id' + '}', job_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKey']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QcApi#remove_job\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param project_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def remove_project(project_id, opts = {})
      remove_project_with_http_info(project_id, opts)
      return nil
    end

    # 
    # 
    # @param project_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def remove_project_with_http_info(project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: QcApi.remove_project ..."
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling QcApi.remove_project"
      end
      # resource path
      local_var_path = "/projects/{project_id}.json".sub('{' + 'project_id' + '}', project_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKey']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QcApi#remove_project\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param project_id A unique identifier of a Project.
    # @param job_id A unique identifier of a Job.
    # @param [Hash] opts the optional parameters
    # @return [Hash<String, String>]
    def signed_urls(project_id, job_id, opts = {})
      data, _status_code, _headers = signed_urls_with_http_info(project_id, job_id, opts)
      return data
    end

    # 
    # 
    # @param project_id A unique identifier of a Project.
    # @param job_id A unique identifier of a Job.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Hash<String, String>, Fixnum, Hash)>] Hash<String, String> data, response status code and response headers
    def signed_urls_with_http_info(project_id, job_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: QcApi.signed_urls ..."
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling QcApi.signed_urls"
      end
      # verify the required parameter 'job_id' is set
      if @api_client.config.client_side_validation && job_id.nil?
        fail ArgumentError, "Missing the required parameter 'job_id' when calling QcApi.signed_urls"
      end
      # resource path
      local_var_path = "/projects/{project_id}/jobs/{job_id}/signed-urls.json".sub('{' + 'project_id' + '}', project_id.to_s).sub('{' + 'job_id' + '}', job_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Hash<String, String>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QcApi#signed_urls\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creates an upload session
    # 
    # @param project_id A unique identifier of a Project.
    # @param video_upload_body 
    # @param [Hash] opts the optional parameters
    # @return [UploadSession]
    def upload_video(project_id, video_upload_body, opts = {})
      data, _status_code, _headers = upload_video_with_http_info(project_id, video_upload_body, opts)
      return data
    end

    # Creates an upload session
    # 
    # @param project_id A unique identifier of a Project.
    # @param video_upload_body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UploadSession, Fixnum, Hash)>] UploadSession data, response status code and response headers
    def upload_video_with_http_info(project_id, video_upload_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: QcApi.upload_video ..."
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling QcApi.upload_video"
      end
      # verify the required parameter 'video_upload_body' is set
      if @api_client.config.client_side_validation && video_upload_body.nil?
        fail ArgumentError, "Missing the required parameter 'video_upload_body' when calling QcApi.upload_video"
      end
      # resource path
      local_var_path = "/projects/{project_id}/upload.json".sub('{' + 'project_id' + '}', project_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(video_upload_body)
      auth_names = ['apiKey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UploadSession')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QcApi#upload_video\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
