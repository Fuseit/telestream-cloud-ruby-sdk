=begin
#Flip API

#Description

OpenAPI spec version: 3.1.0
Contact: cloudsupport@telestream.net
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.0

=end

require 'date'

module TelestreamCloud::Flip

  class Encoding
    # A unique identifier of an Encoding.
    attr_accessor :id

    # Audio bitrate (in bits/s).
    attr_accessor :audio_bitrate

    # A number of audio channels.
    attr_accessor :audio_channels

    # A codec that is used to encode audio streams.
    attr_accessor :audio_codec

    # A number of samples of audio carried per second.
    attr_accessor :audio_sample_rate

    # A date and time when the Encoding has been created.
    attr_accessor :created_at

    attr_accessor :duration

    attr_accessor :encoding_progress

    attr_accessor :encoding_time

    # A class of an error that has occurred during the encoding process. It is present only if the encoding status is equal to `fail`.
    attr_accessor :error_class

    # A message that explains why the encoding process has resulted in an error. It is present only if the encoding status is equal to `fail`.
    attr_accessor :error_message

    attr_accessor :external_id

    # Extension of the output file.
    attr_accessor :extname

    # A size of the output file.
    attr_accessor :file_size

    # An array of output file names.
    attr_accessor :files

    # Number of frames per second.
    attr_accessor :fps

    # Height of the output video.
    attr_accessor :height

    # Width of the output video.
    attr_accessor :width

    # An URL pointing to a logfile.
    attr_accessor :logfile_url

    # A mime type of the encoded file.
    attr_accessor :mime_type

    attr_accessor :parent_encoding_id

    attr_accessor :path

    # An id of a related Profile.
    attr_accessor :profile_id

    # A name of the used Profile.
    attr_accessor :profile_name

    attr_accessor :screenshots

    # A date and time when the encoding process has been started
    attr_accessor :started_encoding_at

    # Determines at what stage the encoding process is at the moment.
    attr_accessor :status

    # A date and time when a Encoding has been updated last time.
    attr_accessor :updated_at

    # video bitrate (in bits/s)
    attr_accessor :video_bitrate

    # A codec that is used to encode video streams.
    attr_accessor :video_codec

    # An id of a related Video object
    attr_accessor :video_id


    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'audio_bitrate' => :'audio_bitrate',
        :'audio_channels' => :'audio_channels',
        :'audio_codec' => :'audio_codec',
        :'audio_sample_rate' => :'audio_sample_rate',
        :'created_at' => :'created_at',
        :'duration' => :'duration',
        :'encoding_progress' => :'encoding_progress',
        :'encoding_time' => :'encoding_time',
        :'error_class' => :'error_class',
        :'error_message' => :'error_message',
        :'external_id' => :'external_id',
        :'extname' => :'extname',
        :'file_size' => :'file_size',
        :'files' => :'files',
        :'fps' => :'fps',
        :'height' => :'height',
        :'width' => :'width',
        :'logfile_url' => :'logfile_url',
        :'mime_type' => :'mime_type',
        :'parent_encoding_id' => :'parent_encoding_id',
        :'path' => :'path',
        :'profile_id' => :'profile_id',
        :'profile_name' => :'profile_name',
        :'screenshots' => :'screenshots',
        :'started_encoding_at' => :'started_encoding_at',
        :'status' => :'status',
        :'updated_at' => :'updated_at',
        :'video_bitrate' => :'video_bitrate',
        :'video_codec' => :'video_codec',
        :'video_id' => :'video_id'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'id' => :'String',
        :'audio_bitrate' => :'Integer',
        :'audio_channels' => :'Integer',
        :'audio_codec' => :'String',
        :'audio_sample_rate' => :'String',
        :'created_at' => :'String',
        :'duration' => :'String',
        :'encoding_progress' => :'String',
        :'encoding_time' => :'String',
        :'error_class' => :'String',
        :'error_message' => :'String',
        :'external_id' => :'String',
        :'extname' => :'String',
        :'file_size' => :'String',
        :'files' => :'Array<String>',
        :'fps' => :'String',
        :'height' => :'String',
        :'width' => :'String',
        :'logfile_url' => :'String',
        :'mime_type' => :'String',
        :'parent_encoding_id' => :'String',
        :'path' => :'String',
        :'profile_id' => :'String',
        :'profile_name' => :'String',
        :'screenshots' => :'Array<String>',
        :'started_encoding_at' => :'String',
        :'status' => :'String',
        :'updated_at' => :'String',
        :'video_bitrate' => :'String',
        :'video_codec' => :'String',
        :'video_id' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'audio_bitrate')
        self.audio_bitrate = attributes[:'audio_bitrate']
      end

      if attributes.has_key?(:'audio_channels')
        self.audio_channels = attributes[:'audio_channels']
      end

      if attributes.has_key?(:'audio_codec')
        self.audio_codec = attributes[:'audio_codec']
      end

      if attributes.has_key?(:'audio_sample_rate')
        self.audio_sample_rate = attributes[:'audio_sample_rate']
      end

      if attributes.has_key?(:'created_at')
        self.created_at = attributes[:'created_at']
      end

      if attributes.has_key?(:'duration')
        self.duration = attributes[:'duration']
      end

      if attributes.has_key?(:'encoding_progress')
        self.encoding_progress = attributes[:'encoding_progress']
      end

      if attributes.has_key?(:'encoding_time')
        self.encoding_time = attributes[:'encoding_time']
      end

      if attributes.has_key?(:'error_class')
        self.error_class = attributes[:'error_class']
      end

      if attributes.has_key?(:'error_message')
        self.error_message = attributes[:'error_message']
      end

      if attributes.has_key?(:'external_id')
        self.external_id = attributes[:'external_id']
      end

      if attributes.has_key?(:'extname')
        self.extname = attributes[:'extname']
      end

      if attributes.has_key?(:'file_size')
        self.file_size = attributes[:'file_size']
      end

      if attributes.has_key?(:'files')
        if (value = attributes[:'files']).is_a?(Array)
          self.files = value
        end
      end

      if attributes.has_key?(:'fps')
        self.fps = attributes[:'fps']
      end

      if attributes.has_key?(:'height')
        self.height = attributes[:'height']
      end

      if attributes.has_key?(:'width')
        self.width = attributes[:'width']
      end

      if attributes.has_key?(:'logfile_url')
        self.logfile_url = attributes[:'logfile_url']
      end

      if attributes.has_key?(:'mime_type')
        self.mime_type = attributes[:'mime_type']
      end

      if attributes.has_key?(:'parent_encoding_id')
        self.parent_encoding_id = attributes[:'parent_encoding_id']
      end

      if attributes.has_key?(:'path')
        self.path = attributes[:'path']
      end

      if attributes.has_key?(:'profile_id')
        self.profile_id = attributes[:'profile_id']
      end

      if attributes.has_key?(:'profile_name')
        self.profile_name = attributes[:'profile_name']
      end

      if attributes.has_key?(:'screenshots')
        if (value = attributes[:'screenshots']).is_a?(Array)
          self.screenshots = value
        end
      end

      if attributes.has_key?(:'started_encoding_at')
        self.started_encoding_at = attributes[:'started_encoding_at']
      end

      if attributes.has_key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.has_key?(:'updated_at')
        self.updated_at = attributes[:'updated_at']
      end

      if attributes.has_key?(:'video_bitrate')
        self.video_bitrate = attributes[:'video_bitrate']
      end

      if attributes.has_key?(:'video_codec')
        self.video_codec = attributes[:'video_codec']
      end

      if attributes.has_key?(:'video_id')
        self.video_id = attributes[:'video_id']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          audio_bitrate == o.audio_bitrate &&
          audio_channels == o.audio_channels &&
          audio_codec == o.audio_codec &&
          audio_sample_rate == o.audio_sample_rate &&
          created_at == o.created_at &&
          duration == o.duration &&
          encoding_progress == o.encoding_progress &&
          encoding_time == o.encoding_time &&
          error_class == o.error_class &&
          error_message == o.error_message &&
          external_id == o.external_id &&
          extname == o.extname &&
          file_size == o.file_size &&
          files == o.files &&
          fps == o.fps &&
          height == o.height &&
          width == o.width &&
          logfile_url == o.logfile_url &&
          mime_type == o.mime_type &&
          parent_encoding_id == o.parent_encoding_id &&
          path == o.path &&
          profile_id == o.profile_id &&
          profile_name == o.profile_name &&
          screenshots == o.screenshots &&
          started_encoding_at == o.started_encoding_at &&
          status == o.status &&
          updated_at == o.updated_at &&
          video_bitrate == o.video_bitrate &&
          video_codec == o.video_codec &&
          video_id == o.video_id
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, audio_bitrate, audio_channels, audio_codec, audio_sample_rate, created_at, duration, encoding_progress, encoding_time, error_class, error_message, external_id, extname, file_size, files, fps, height, width, logfile_url, mime_type, parent_encoding_id, path, profile_id, profile_name, screenshots, started_encoding_at, status, updated_at, video_bitrate, video_codec, video_id].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = TelestreamCloud::Flip.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
