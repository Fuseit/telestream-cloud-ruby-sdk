=begin
#Flip API

#Description

OpenAPI spec version: 3.1.0
Contact: cloudsupport@telestream.net
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.2.3

=end

require "uri"

module TelestreamCloud::Flip
  class FlipApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Cancels an Encoding.
    # 
    # @param id Id of an Encoding.
    # @param factory_id Id of a Factory.
    # @param [Hash] opts the optional parameters
    # @return [CanceledResponse]
    def cancel_encoding(id, factory_id, opts = {})
      data, _status_code, _headers = cancel_encoding_with_http_info(id, factory_id, opts)
      return data
    end

    # Cancels an Encoding.
    # 
    # @param id Id of an Encoding.
    # @param factory_id Id of a Factory.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CanceledResponse, Fixnum, Hash)>] CanceledResponse data, response status code and response headers
    def cancel_encoding_with_http_info(id, factory_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FlipApi.cancel_encoding ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling FlipApi.cancel_encoding"
      end
      # verify the required parameter 'factory_id' is set
      if @api_client.config.client_side_validation && factory_id.nil?
        fail ArgumentError, "Missing the required parameter 'factory_id' when calling FlipApi.cancel_encoding"
      end
      # resource path
      local_var_path = "/encodings/{id}/cancel.json".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'factory_id'] = factory_id

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CanceledResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FlipApi#cancel_encoding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Copies a given Profile
    # 
    # @param id Id of a Profile.
    # @param factory_id Id of a Factory.
    # @param copy_profile_body 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :expand If expand option is set Profile objects will contain all command parameters, even if their value is default. By default this is not set.
    # @return [Profile]
    def copy_profile(id, factory_id, copy_profile_body, opts = {})
      data, _status_code, _headers = copy_profile_with_http_info(id, factory_id, copy_profile_body, opts)
      return data
    end

    # Copies a given Profile
    # 
    # @param id Id of a Profile.
    # @param factory_id Id of a Factory.
    # @param copy_profile_body 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :expand If expand option is set Profile objects will contain all command parameters, even if their value is default. By default this is not set.
    # @return [Array<(Profile, Fixnum, Hash)>] Profile data, response status code and response headers
    def copy_profile_with_http_info(id, factory_id, copy_profile_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FlipApi.copy_profile ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling FlipApi.copy_profile"
      end
      # verify the required parameter 'factory_id' is set
      if @api_client.config.client_side_validation && factory_id.nil?
        fail ArgumentError, "Missing the required parameter 'factory_id' when calling FlipApi.copy_profile"
      end
      # verify the required parameter 'copy_profile_body' is set
      if @api_client.config.client_side_validation && copy_profile_body.nil?
        fail ArgumentError, "Missing the required parameter 'copy_profile_body' when calling FlipApi.copy_profile"
      end
      # resource path
      local_var_path = "/profiles/{id}/copy.json".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'factory_id'] = factory_id
      query_params[:'expand'] = opts[:'expand'] if !opts[:'expand'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(copy_profile_body)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Profile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FlipApi#copy_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creates an Encoding
    # 
    # @param factory_id Id of a Factory.
    # @param create_encoding_body 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :screenshots Determines whether the response will include screenshots. By default this is not set.
    # @option opts [BOOLEAN] :precise_status Determines whether the response will include a precise status. By default this is not set.
    # @return [Encoding]
    def create_encoding(factory_id, create_encoding_body, opts = {})
      data, _status_code, _headers = create_encoding_with_http_info(factory_id, create_encoding_body, opts)
      return data
    end

    # Creates an Encoding
    # 
    # @param factory_id Id of a Factory.
    # @param create_encoding_body 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :screenshots Determines whether the response will include screenshots. By default this is not set.
    # @option opts [BOOLEAN] :precise_status Determines whether the response will include a precise status. By default this is not set.
    # @return [Array<(Encoding, Fixnum, Hash)>] Encoding data, response status code and response headers
    def create_encoding_with_http_info(factory_id, create_encoding_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FlipApi.create_encoding ..."
      end
      # verify the required parameter 'factory_id' is set
      if @api_client.config.client_side_validation && factory_id.nil?
        fail ArgumentError, "Missing the required parameter 'factory_id' when calling FlipApi.create_encoding"
      end
      # verify the required parameter 'create_encoding_body' is set
      if @api_client.config.client_side_validation && create_encoding_body.nil?
        fail ArgumentError, "Missing the required parameter 'create_encoding_body' when calling FlipApi.create_encoding"
      end
      # resource path
      local_var_path = "/encodings.json"

      # query parameters
      query_params = {}
      query_params[:'factory_id'] = factory_id
      query_params[:'screenshots'] = opts[:'screenshots'] if !opts[:'screenshots'].nil?
      query_params[:'precise_status'] = opts[:'precise_status'] if !opts[:'precise_status'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(create_encoding_body)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Encoding')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FlipApi#create_encoding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creates a new factory
    # 
    # @param create_factory_body 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :with_storage_provider if set to &#x60;true&#x60;, results will include a storage provider&#39;s id
    # @return [Factory]
    def create_factory(create_factory_body, opts = {})
      data, _status_code, _headers = create_factory_with_http_info(create_factory_body, opts)
      return data
    end

    # Creates a new factory
    # 
    # @param create_factory_body 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :with_storage_provider if set to &#x60;true&#x60;, results will include a storage provider&#39;s id
    # @return [Array<(Factory, Fixnum, Hash)>] Factory data, response status code and response headers
    def create_factory_with_http_info(create_factory_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FlipApi.create_factory ..."
      end
      # verify the required parameter 'create_factory_body' is set
      if @api_client.config.client_side_validation && create_factory_body.nil?
        fail ArgumentError, "Missing the required parameter 'create_factory_body' when calling FlipApi.create_factory"
      end
      # resource path
      local_var_path = "/factories.json"

      # query parameters
      query_params = {}
      query_params[:'with_storage_provider'] = opts[:'with_storage_provider'] if !opts[:'with_storage_provider'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(create_factory_body)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Factory')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FlipApi#create_factory\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creates a Profile
    # 
    # @param factory_id Id of a Factory.
    # @param create_profile_body 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :exclude_advanced_services 
    # @option opts [BOOLEAN] :expand If expand option is set Profile objects will contain all command parameters, even if their value is default. By default it is not set.
    # @return [Profile]
    def create_profile(factory_id, create_profile_body, opts = {})
      data, _status_code, _headers = create_profile_with_http_info(factory_id, create_profile_body, opts)
      return data
    end

    # Creates a Profile
    # 
    # @param factory_id Id of a Factory.
    # @param create_profile_body 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :exclude_advanced_services 
    # @option opts [BOOLEAN] :expand If expand option is set Profile objects will contain all command parameters, even if their value is default. By default it is not set.
    # @return [Array<(Profile, Fixnum, Hash)>] Profile data, response status code and response headers
    def create_profile_with_http_info(factory_id, create_profile_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FlipApi.create_profile ..."
      end
      # verify the required parameter 'factory_id' is set
      if @api_client.config.client_side_validation && factory_id.nil?
        fail ArgumentError, "Missing the required parameter 'factory_id' when calling FlipApi.create_profile"
      end
      # verify the required parameter 'create_profile_body' is set
      if @api_client.config.client_side_validation && create_profile_body.nil?
        fail ArgumentError, "Missing the required parameter 'create_profile_body' when calling FlipApi.create_profile"
      end
      # resource path
      local_var_path = "/profiles.json"

      # query parameters
      query_params = {}
      query_params[:'factory_id'] = factory_id
      query_params[:'exclude_advanced_services'] = opts[:'exclude_advanced_services'] if !opts[:'exclude_advanced_services'].nil?
      query_params[:'expand'] = opts[:'expand'] if !opts[:'expand'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(create_profile_body)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Profile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FlipApi#create_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creates a Video from a provided source_url.
    # 
    # @param factory_id Id of a Factory.
    # @param create_video_body 
    # @param [Hash] opts the optional parameters
    # @return [Video]
    def create_video(factory_id, create_video_body, opts = {})
      data, _status_code, _headers = create_video_with_http_info(factory_id, create_video_body, opts)
      return data
    end

    # Creates a Video from a provided source_url.
    # 
    # @param factory_id Id of a Factory.
    # @param create_video_body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Video, Fixnum, Hash)>] Video data, response status code and response headers
    def create_video_with_http_info(factory_id, create_video_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FlipApi.create_video ..."
      end
      # verify the required parameter 'factory_id' is set
      if @api_client.config.client_side_validation && factory_id.nil?
        fail ArgumentError, "Missing the required parameter 'factory_id' when calling FlipApi.create_video"
      end
      # verify the required parameter 'create_video_body' is set
      if @api_client.config.client_side_validation && create_video_body.nil?
        fail ArgumentError, "Missing the required parameter 'create_video_body' when calling FlipApi.create_video"
      end
      # resource path
      local_var_path = "/videos.json"

      # query parameters
      query_params = {}
      query_params[:'factory_id'] = factory_id

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(create_video_body)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Video')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FlipApi#create_video\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creates a Workorder.
    # 
    # @param factory_id Id of a Factory.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :profile_id Id of a Profile.
    # @option opts [File] :file Input file.
    # @option opts [String] :source_url URL pointing to an input file.
    # @return [nil]
    def create_workorder(factory_id, opts = {})
      create_workorder_with_http_info(factory_id, opts)
      return nil
    end

    # Creates a Workorder.
    # 
    # @param factory_id Id of a Factory.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :profile_id Id of a Profile.
    # @option opts [File] :file Input file.
    # @option opts [String] :source_url URL pointing to an input file.
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_workorder_with_http_info(factory_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FlipApi.create_workorder ..."
      end
      # verify the required parameter 'factory_id' is set
      if @api_client.config.client_side_validation && factory_id.nil?
        fail ArgumentError, "Missing the required parameter 'factory_id' when calling FlipApi.create_workorder"
      end
      # resource path
      local_var_path = "/workorders.json"

      # query parameters
      query_params = {}
      query_params[:'factory_id'] = factory_id

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params["profile_id"] = opts[:'profile_id'] if !opts[:'profile_id'].nil?
      form_params["file"] = opts[:'file'] if !opts[:'file'].nil?
      form_params["source_url"] = opts[:'source_url'] if !opts[:'source_url'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FlipApi#create_workorder\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deletes an Encoding from both Telestream Cloud and your storage. Returns an information whether the operation was successful.
    # 
    # @param id Id of an Encoding.
    # @param factory_id Id of a Factory.
    # @param [Hash] opts the optional parameters
    # @return [DeletedResponse]
    def delete_encoding(id, factory_id, opts = {})
      data, _status_code, _headers = delete_encoding_with_http_info(id, factory_id, opts)
      return data
    end

    # Deletes an Encoding from both Telestream Cloud and your storage. Returns an information whether the operation was successful.
    # 
    # @param id Id of an Encoding.
    # @param factory_id Id of a Factory.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeletedResponse, Fixnum, Hash)>] DeletedResponse data, response status code and response headers
    def delete_encoding_with_http_info(id, factory_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FlipApi.delete_encoding ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling FlipApi.delete_encoding"
      end
      # verify the required parameter 'factory_id' is set
      if @api_client.config.client_side_validation && factory_id.nil?
        fail ArgumentError, "Missing the required parameter 'factory_id' when calling FlipApi.delete_encoding"
      end
      # resource path
      local_var_path = "/encodings/{id}.json".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'factory_id'] = factory_id

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DeletedResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FlipApi#delete_encoding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deletes a given Profile
    # 
    # @param id Id of a Profile
    # @param factory_id Id of a Factory.
    # @param [Hash] opts the optional parameters
    # @return [DeletedResponse]
    def delete_profile(id, factory_id, opts = {})
      data, _status_code, _headers = delete_profile_with_http_info(id, factory_id, opts)
      return data
    end

    # Deletes a given Profile
    # 
    # @param id Id of a Profile
    # @param factory_id Id of a Factory.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeletedResponse, Fixnum, Hash)>] DeletedResponse data, response status code and response headers
    def delete_profile_with_http_info(id, factory_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FlipApi.delete_profile ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling FlipApi.delete_profile"
      end
      # verify the required parameter 'factory_id' is set
      if @api_client.config.client_side_validation && factory_id.nil?
        fail ArgumentError, "Missing the required parameter 'factory_id' when calling FlipApi.delete_profile"
      end
      # resource path
      local_var_path = "/profiles/{id}.json".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'factory_id'] = factory_id

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DeletedResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FlipApi#delete_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deletes a Video object.
    # 
    # @param id Id of a Video.
    # @param factory_id Id of a Factory.
    # @param [Hash] opts the optional parameters
    # @return [DeletedResponse]
    def delete_video(id, factory_id, opts = {})
      data, _status_code, _headers = delete_video_with_http_info(id, factory_id, opts)
      return data
    end

    # Deletes a Video object.
    # 
    # @param id Id of a Video.
    # @param factory_id Id of a Factory.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeletedResponse, Fixnum, Hash)>] DeletedResponse data, response status code and response headers
    def delete_video_with_http_info(id, factory_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FlipApi.delete_video ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling FlipApi.delete_video"
      end
      # verify the required parameter 'factory_id' is set
      if @api_client.config.client_side_validation && factory_id.nil?
        fail ArgumentError, "Missing the required parameter 'factory_id' when calling FlipApi.delete_video"
      end
      # resource path
      local_var_path = "/videos/{id}.json".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'factory_id'] = factory_id

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DeletedResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FlipApi#delete_video\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a video's source file.
    # 
    # @param id Id of a Video.
    # @param factory_id Id of a Factory.
    # @param [Hash] opts the optional parameters
    # @return [DeletedResponse]
    def delete_video_source(id, factory_id, opts = {})
      data, _status_code, _headers = delete_video_source_with_http_info(id, factory_id, opts)
      return data
    end

    # Delete a video&#39;s source file.
    # 
    # @param id Id of a Video.
    # @param factory_id Id of a Factory.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeletedResponse, Fixnum, Hash)>] DeletedResponse data, response status code and response headers
    def delete_video_source_with_http_info(id, factory_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FlipApi.delete_video_source ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling FlipApi.delete_video_source"
      end
      # verify the required parameter 'factory_id' is set
      if @api_client.config.client_side_validation && factory_id.nil?
        fail ArgumentError, "Missing the required parameter 'factory_id' when calling FlipApi.delete_video_source"
      end
      # resource path
      local_var_path = "/videos/{id}/source.json".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'factory_id'] = factory_id

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DeletedResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FlipApi#delete_video_source\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns an Encoding object.
    # 
    # @param id Id of an Encoding.
    # @param factory_id Id of a Factory.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :screenshots Determines whether the response will include screenshots. By default this is not set.
    # @option opts [BOOLEAN] :precise_status Determines whether the response will include a precise status. By default this is not set.
    # @return [Encoding]
    def encoding(id, factory_id, opts = {})
      data, _status_code, _headers = encoding_with_http_info(id, factory_id, opts)
      return data
    end

    # Returns an Encoding object.
    # 
    # @param id Id of an Encoding.
    # @param factory_id Id of a Factory.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :screenshots Determines whether the response will include screenshots. By default this is not set.
    # @option opts [BOOLEAN] :precise_status Determines whether the response will include a precise status. By default this is not set.
    # @return [Array<(Encoding, Fixnum, Hash)>] Encoding data, response status code and response headers
    def encoding_with_http_info(id, factory_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FlipApi.encoding ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling FlipApi.encoding"
      end
      # verify the required parameter 'factory_id' is set
      if @api_client.config.client_side_validation && factory_id.nil?
        fail ArgumentError, "Missing the required parameter 'factory_id' when calling FlipApi.encoding"
      end
      # resource path
      local_var_path = "/encodings/{id}.json".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'factory_id'] = factory_id
      query_params[:'screenshots'] = opts[:'screenshots'] if !opts[:'screenshots'].nil?
      query_params[:'precise_status'] = opts[:'precise_status'] if !opts[:'precise_status'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Encoding')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FlipApi#encoding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns a list of Encoding objects
    # 
    # @param factory_id Id of a Factory.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :video_id Id of a Video. When specified, the resulting list will contain videos that belong to the Video.
    # @option opts [String] :status One of &#x60;success&#x60;, &#x60;fail&#x60;, &#x60;processing&#x60;. When specified, the resulting list will contain ecodings filtered by status.
    # @option opts [String] :profile_id Filter by profile_id.
    # @option opts [String] :profile_name Filter by profile_name.
    # @option opts [Integer] :page A page to be fetched. Default is &#x60;1&#x60;.
    # @option opts [Integer] :per_page A number of results per page. Default is &#x60;100&#x60;.
    # @option opts [BOOLEAN] :screenshots Determines whether the response will include screenshots. By default this is not set.
    # @option opts [BOOLEAN] :precise_status Determines whether the response will include a precise status. By default this is not set.
    # @return [PaginatedEncodingsCollection]
    def encodings(factory_id, opts = {})
      data, _status_code, _headers = encodings_with_http_info(factory_id, opts)
      return data
    end

    # Returns a list of Encoding objects
    # 
    # @param factory_id Id of a Factory.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :video_id Id of a Video. When specified, the resulting list will contain videos that belong to the Video.
    # @option opts [String] :status One of &#x60;success&#x60;, &#x60;fail&#x60;, &#x60;processing&#x60;. When specified, the resulting list will contain ecodings filtered by status.
    # @option opts [String] :profile_id Filter by profile_id.
    # @option opts [String] :profile_name Filter by profile_name.
    # @option opts [Integer] :page A page to be fetched. Default is &#x60;1&#x60;.
    # @option opts [Integer] :per_page A number of results per page. Default is &#x60;100&#x60;.
    # @option opts [BOOLEAN] :screenshots Determines whether the response will include screenshots. By default this is not set.
    # @option opts [BOOLEAN] :precise_status Determines whether the response will include a precise status. By default this is not set.
    # @return [Array<(PaginatedEncodingsCollection, Fixnum, Hash)>] PaginatedEncodingsCollection data, response status code and response headers
    def encodings_with_http_info(factory_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FlipApi.encodings ..."
      end
      # verify the required parameter 'factory_id' is set
      if @api_client.config.client_side_validation && factory_id.nil?
        fail ArgumentError, "Missing the required parameter 'factory_id' when calling FlipApi.encodings"
      end
      # resource path
      local_var_path = "/encodings.json"

      # query parameters
      query_params = {}
      query_params[:'factory_id'] = factory_id
      query_params[:'video_id'] = opts[:'video_id'] if !opts[:'video_id'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'profile_id'] = opts[:'profile_id'] if !opts[:'profile_id'].nil?
      query_params[:'profile_name'] = opts[:'profile_name'] if !opts[:'profile_name'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'screenshots'] = opts[:'screenshots'] if !opts[:'screenshots'].nil?
      query_params[:'precise_status'] = opts[:'precise_status'] if !opts[:'precise_status'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PaginatedEncodingsCollection')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FlipApi#encodings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns a number of Encoding objects created using a given factory.
    # 
    # @param factory_id Id of a Factory.
    # @param [Hash] opts the optional parameters
    # @return [CountResponse]
    def encodings_count(factory_id, opts = {})
      data, _status_code, _headers = encodings_count_with_http_info(factory_id, opts)
      return data
    end

    # Returns a number of Encoding objects created using a given factory.
    # 
    # @param factory_id Id of a Factory.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CountResponse, Fixnum, Hash)>] CountResponse data, response status code and response headers
    def encodings_count_with_http_info(factory_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FlipApi.encodings_count ..."
      end
      # verify the required parameter 'factory_id' is set
      if @api_client.config.client_side_validation && factory_id.nil?
        fail ArgumentError, "Missing the required parameter 'factory_id' when calling FlipApi.encodings_count"
      end
      # resource path
      local_var_path = "/encodings/count.json"

      # query parameters
      query_params = {}
      query_params[:'factory_id'] = factory_id

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CountResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FlipApi#encodings_count\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns a collection of Factory objects.
    # Returns a collection of Factory objects.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page A page to be fetched. Default is &#x60;1&#x60;.
    # @option opts [Integer] :per_page A number of results per page. Default is &#x60;100&#x60;.
    # @option opts [BOOLEAN] :with_storage_provider if set to &#x60;true&#x60;, results will include a storage provider&#39;s id
    # @return [PaginatedFactoryCollection]
    def factories(opts = {})
      data, _status_code, _headers = factories_with_http_info(opts)
      return data
    end

    # Returns a collection of Factory objects.
    # Returns a collection of Factory objects.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page A page to be fetched. Default is &#x60;1&#x60;.
    # @option opts [Integer] :per_page A number of results per page. Default is &#x60;100&#x60;.
    # @option opts [BOOLEAN] :with_storage_provider if set to &#x60;true&#x60;, results will include a storage provider&#39;s id
    # @return [Array<(PaginatedFactoryCollection, Fixnum, Hash)>] PaginatedFactoryCollection data, response status code and response headers
    def factories_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FlipApi.factories ..."
      end
      # resource path
      local_var_path = "/factories.json"

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'with_storage_provider'] = opts[:'with_storage_provider'] if !opts[:'with_storage_provider'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PaginatedFactoryCollection')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FlipApi#factories\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns a Factory object.
    # Returns a Factory object.
    # @param id id of a factory
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :with_storage_provider if set to &#x60;true&#x60;, results will include a storage provider&#39;s id
    # @return [Factory]
    def factory(id, opts = {})
      data, _status_code, _headers = factory_with_http_info(id, opts)
      return data
    end

    # Returns a Factory object.
    # Returns a Factory object.
    # @param id id of a factory
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :with_storage_provider if set to &#x60;true&#x60;, results will include a storage provider&#39;s id
    # @return [Array<(Factory, Fixnum, Hash)>] Factory data, response status code and response headers
    def factory_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FlipApi.factory ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling FlipApi.factory"
      end
      # resource path
      local_var_path = "/factories/{id}.json".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'with_storage_provider'] = opts[:'with_storage_provider'] if !opts[:'with_storage_provider'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Factory')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FlipApi#factory\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns a Factory's notification settings.
    # 
    # @param factory_id Id of a Factory.
    # @param [Hash] opts the optional parameters
    # @return [CloudNotificationSettings]
    def notifications(factory_id, opts = {})
      data, _status_code, _headers = notifications_with_http_info(factory_id, opts)
      return data
    end

    # Returns a Factory&#39;s notification settings.
    # 
    # @param factory_id Id of a Factory.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CloudNotificationSettings, Fixnum, Hash)>] CloudNotificationSettings data, response status code and response headers
    def notifications_with_http_info(factory_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FlipApi.notifications ..."
      end
      # verify the required parameter 'factory_id' is set
      if @api_client.config.client_side_validation && factory_id.nil?
        fail ArgumentError, "Missing the required parameter 'factory_id' when calling FlipApi.notifications"
      end
      # resource path
      local_var_path = "/notifications.json"

      # query parameters
      query_params = {}
      query_params[:'factory_id'] = factory_id

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CloudNotificationSettings')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FlipApi#notifications\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns a Profile object.
    # 
    # @param id_or_name A name or an id of a Profile.
    # @param factory_id Id of a Factory.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :expand If expand option is set Profile objects will contain all command parameters, even if their value is default. By default this is not set.
    # @return [Profile]
    def profile(id_or_name, factory_id, opts = {})
      data, _status_code, _headers = profile_with_http_info(id_or_name, factory_id, opts)
      return data
    end

    # Returns a Profile object.
    # 
    # @param id_or_name A name or an id of a Profile.
    # @param factory_id Id of a Factory.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :expand If expand option is set Profile objects will contain all command parameters, even if their value is default. By default this is not set.
    # @return [Array<(Profile, Fixnum, Hash)>] Profile data, response status code and response headers
    def profile_with_http_info(id_or_name, factory_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FlipApi.profile ..."
      end
      # verify the required parameter 'id_or_name' is set
      if @api_client.config.client_side_validation && id_or_name.nil?
        fail ArgumentError, "Missing the required parameter 'id_or_name' when calling FlipApi.profile"
      end
      # verify the required parameter 'factory_id' is set
      if @api_client.config.client_side_validation && factory_id.nil?
        fail ArgumentError, "Missing the required parameter 'factory_id' when calling FlipApi.profile"
      end
      # resource path
      local_var_path = "/profiles/{id_or_name}.json".sub('{' + 'id_or_name' + '}', id_or_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'factory_id'] = factory_id
      query_params[:'expand'] = opts[:'expand'] if !opts[:'expand'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Profile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FlipApi#profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns a list of Encodings that belong to a Profile.
    # 
    # @param id_or_name Id or name of a Profile.
    # @param factory_id Id of a Factory.
    # @param [Hash] opts the optional parameters
    # @return [PaginatedEncodingsCollection]
    def profile_encodings(id_or_name, factory_id, opts = {})
      data, _status_code, _headers = profile_encodings_with_http_info(id_or_name, factory_id, opts)
      return data
    end

    # Returns a list of Encodings that belong to a Profile.
    # 
    # @param id_or_name Id or name of a Profile.
    # @param factory_id Id of a Factory.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PaginatedEncodingsCollection, Fixnum, Hash)>] PaginatedEncodingsCollection data, response status code and response headers
    def profile_encodings_with_http_info(id_or_name, factory_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FlipApi.profile_encodings ..."
      end
      # verify the required parameter 'id_or_name' is set
      if @api_client.config.client_side_validation && id_or_name.nil?
        fail ArgumentError, "Missing the required parameter 'id_or_name' when calling FlipApi.profile_encodings"
      end
      # verify the required parameter 'factory_id' is set
      if @api_client.config.client_side_validation && factory_id.nil?
        fail ArgumentError, "Missing the required parameter 'factory_id' when calling FlipApi.profile_encodings"
      end
      # resource path
      local_var_path = "/profiles/{id_or_name}/encodings.json".sub('{' + 'id_or_name' + '}', id_or_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'factory_id'] = factory_id

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PaginatedEncodingsCollection')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FlipApi#profile_encodings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns a collection of Profile objects.
    # 
    # @param factory_id Id of a Factory.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :exclude_advanced_services Determine whether exclude Advanced Services profiles from the results. By default this is not set.
    # @option opts [BOOLEAN] :expand If expand option is set Profile objects will contain all command parameters, even if their value is default. By default this is not set.
    # @option opts [Integer] :page A page to be fetched. Default is &#x60;1&#x60;.
    # @option opts [Integer] :per_page A number of results per page. Default is &#x60;100&#x60;.
    # @return [PaginatedProfilesCollection]
    def profiles(factory_id, opts = {})
      data, _status_code, _headers = profiles_with_http_info(factory_id, opts)
      return data
    end

    # Returns a collection of Profile objects.
    # 
    # @param factory_id Id of a Factory.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :exclude_advanced_services Determine whether exclude Advanced Services profiles from the results. By default this is not set.
    # @option opts [BOOLEAN] :expand If expand option is set Profile objects will contain all command parameters, even if their value is default. By default this is not set.
    # @option opts [Integer] :page A page to be fetched. Default is &#x60;1&#x60;.
    # @option opts [Integer] :per_page A number of results per page. Default is &#x60;100&#x60;.
    # @return [Array<(PaginatedProfilesCollection, Fixnum, Hash)>] PaginatedProfilesCollection data, response status code and response headers
    def profiles_with_http_info(factory_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FlipApi.profiles ..."
      end
      # verify the required parameter 'factory_id' is set
      if @api_client.config.client_side_validation && factory_id.nil?
        fail ArgumentError, "Missing the required parameter 'factory_id' when calling FlipApi.profiles"
      end
      # resource path
      local_var_path = "/profiles.json"

      # query parameters
      query_params = {}
      query_params[:'factory_id'] = factory_id
      query_params[:'exclude_advanced_services'] = opts[:'exclude_advanced_services'] if !opts[:'exclude_advanced_services'].nil?
      query_params[:'expand'] = opts[:'expand'] if !opts[:'expand'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PaginatedProfilesCollection')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FlipApi#profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns a collection of Video objects queued for encoding.
    # 
    # @param factory_id Id of a Factory.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page A page to be fetched. Default is &#x60;1&#x60;.
    # @option opts [Integer] :per_page A number of results per page. Default is &#x60;100&#x60;.
    # @return [PaginatedVideoCollection]
    def queued_videos(factory_id, opts = {})
      data, _status_code, _headers = queued_videos_with_http_info(factory_id, opts)
      return data
    end

    # Returns a collection of Video objects queued for encoding.
    # 
    # @param factory_id Id of a Factory.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page A page to be fetched. Default is &#x60;1&#x60;.
    # @option opts [Integer] :per_page A number of results per page. Default is &#x60;100&#x60;.
    # @return [Array<(PaginatedVideoCollection, Fixnum, Hash)>] PaginatedVideoCollection data, response status code and response headers
    def queued_videos_with_http_info(factory_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FlipApi.queued_videos ..."
      end
      # verify the required parameter 'factory_id' is set
      if @api_client.config.client_side_validation && factory_id.nil?
        fail ArgumentError, "Missing the required parameter 'factory_id' when calling FlipApi.queued_videos"
      end
      # resource path
      local_var_path = "/videos/queued.json"

      # query parameters
      query_params = {}
      query_params[:'factory_id'] = factory_id
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PaginatedVideoCollection')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FlipApi#queued_videos\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Resubmits a video to encode.
    # Resubmits the video to encode. Please note that this option will work only for videos in `success` status.
    # @param factory_id Id of a Factory.
    # @param resubmit_video_body 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def resubmit_video(factory_id, resubmit_video_body, opts = {})
      resubmit_video_with_http_info(factory_id, resubmit_video_body, opts)
      return nil
    end

    # Resubmits a video to encode.
    # Resubmits the video to encode. Please note that this option will work only for videos in &#x60;success&#x60; status.
    # @param factory_id Id of a Factory.
    # @param resubmit_video_body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def resubmit_video_with_http_info(factory_id, resubmit_video_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FlipApi.resubmit_video ..."
      end
      # verify the required parameter 'factory_id' is set
      if @api_client.config.client_side_validation && factory_id.nil?
        fail ArgumentError, "Missing the required parameter 'factory_id' when calling FlipApi.resubmit_video"
      end
      # verify the required parameter 'resubmit_video_body' is set
      if @api_client.config.client_side_validation && resubmit_video_body.nil?
        fail ArgumentError, "Missing the required parameter 'resubmit_video_body' when calling FlipApi.resubmit_video"
      end
      # resource path
      local_var_path = "/videos/resubmit.json"

      # query parameters
      query_params = {}
      query_params[:'factory_id'] = factory_id

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(resubmit_video_body)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FlipApi#resubmit_video\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retries a failed encoding.
    # 
    # @param id Id of an Encoding.
    # @param factory_id Id of a Factory.
    # @param [Hash] opts the optional parameters
    # @return [RetriedResponse]
    def retry_encoding(id, factory_id, opts = {})
      data, _status_code, _headers = retry_encoding_with_http_info(id, factory_id, opts)
      return data
    end

    # Retries a failed encoding.
    # 
    # @param id Id of an Encoding.
    # @param factory_id Id of a Factory.
    # @param [Hash] opts the optional parameters
    # @return [Array<(RetriedResponse, Fixnum, Hash)>] RetriedResponse data, response status code and response headers
    def retry_encoding_with_http_info(id, factory_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FlipApi.retry_encoding ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling FlipApi.retry_encoding"
      end
      # verify the required parameter 'factory_id' is set
      if @api_client.config.client_side_validation && factory_id.nil?
        fail ArgumentError, "Missing the required parameter 'factory_id' when calling FlipApi.retry_encoding"
      end
      # resource path
      local_var_path = "/encodings/{id}/retry.json".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'factory_id'] = factory_id

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RetriedResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FlipApi#retry_encoding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns a signed url pointing to an Encoding.
    # 
    # @param id Id of an Encoding.
    # @param factory_id Id of a Factory.
    # @param [Hash] opts the optional parameters
    # @return [EncodingSignedUrl]
    def signed_encoding_url(id, factory_id, opts = {})
      data, _status_code, _headers = signed_encoding_url_with_http_info(id, factory_id, opts)
      return data
    end

    # Returns a signed url pointing to an Encoding.
    # 
    # @param id Id of an Encoding.
    # @param factory_id Id of a Factory.
    # @param [Hash] opts the optional parameters
    # @return [Array<(EncodingSignedUrl, Fixnum, Hash)>] EncodingSignedUrl data, response status code and response headers
    def signed_encoding_url_with_http_info(id, factory_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FlipApi.signed_encoding_url ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling FlipApi.signed_encoding_url"
      end
      # verify the required parameter 'factory_id' is set
      if @api_client.config.client_side_validation && factory_id.nil?
        fail ArgumentError, "Missing the required parameter 'factory_id' when calling FlipApi.signed_encoding_url"
      end
      # resource path
      local_var_path = "/encodings/{id}/signed-url.json".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'factory_id'] = factory_id

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EncodingSignedUrl')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FlipApi#signed_encoding_url\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns a list of signed urls pointing to an Encoding's outputs.
    # 
    # @param id Id of an Encoding.
    # @param factory_id Id of a Factory.
    # @param [Hash] opts the optional parameters
    # @return [EncodingSignedUrls]
    def signed_encoding_urls(id, factory_id, opts = {})
      data, _status_code, _headers = signed_encoding_urls_with_http_info(id, factory_id, opts)
      return data
    end

    # Returns a list of signed urls pointing to an Encoding&#39;s outputs.
    # 
    # @param id Id of an Encoding.
    # @param factory_id Id of a Factory.
    # @param [Hash] opts the optional parameters
    # @return [Array<(EncodingSignedUrls, Fixnum, Hash)>] EncodingSignedUrls data, response status code and response headers
    def signed_encoding_urls_with_http_info(id, factory_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FlipApi.signed_encoding_urls ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling FlipApi.signed_encoding_urls"
      end
      # verify the required parameter 'factory_id' is set
      if @api_client.config.client_side_validation && factory_id.nil?
        fail ArgumentError, "Missing the required parameter 'factory_id' when calling FlipApi.signed_encoding_urls"
      end
      # resource path
      local_var_path = "/encodings/{id}/signed-urls.json".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'factory_id'] = factory_id

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EncodingSignedUrls')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FlipApi#signed_encoding_urls\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns a signed url pointing to a Video.
    # 
    # @param id Id of a Video.
    # @param factory_id Id of a Factory.
    # @param [Hash] opts the optional parameters
    # @return [SignedVideoUrl]
    def signed_video_url(id, factory_id, opts = {})
      data, _status_code, _headers = signed_video_url_with_http_info(id, factory_id, opts)
      return data
    end

    # Returns a signed url pointing to a Video.
    # 
    # @param id Id of a Video.
    # @param factory_id Id of a Factory.
    # @param [Hash] opts the optional parameters
    # @return [Array<(SignedVideoUrl, Fixnum, Hash)>] SignedVideoUrl data, response status code and response headers
    def signed_video_url_with_http_info(id, factory_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FlipApi.signed_video_url ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling FlipApi.signed_video_url"
      end
      # verify the required parameter 'factory_id' is set
      if @api_client.config.client_side_validation && factory_id.nil?
        fail ArgumentError, "Missing the required parameter 'factory_id' when calling FlipApi.signed_video_url"
      end
      # resource path
      local_var_path = "/videos/{id}/signed-url.json".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'factory_id'] = factory_id

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SignedVideoUrl')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FlipApi#signed_video_url\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Toggles synchronisation settings.
    # 
    # @param id id of the factory
    # @param factory_sync_body 
    # @param [Hash] opts the optional parameters
    # @return [FactorySync]
    def toggle_factory_sync(id, factory_sync_body, opts = {})
      data, _status_code, _headers = toggle_factory_sync_with_http_info(id, factory_sync_body, opts)
      return data
    end

    # Toggles synchronisation settings.
    # 
    # @param id id of the factory
    # @param factory_sync_body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FactorySync, Fixnum, Hash)>] FactorySync data, response status code and response headers
    def toggle_factory_sync_with_http_info(id, factory_sync_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FlipApi.toggle_factory_sync ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling FlipApi.toggle_factory_sync"
      end
      # verify the required parameter 'factory_sync_body' is set
      if @api_client.config.client_side_validation && factory_sync_body.nil?
        fail ArgumentError, "Missing the required parameter 'factory_sync_body' when calling FlipApi.toggle_factory_sync"
      end
      # resource path
      local_var_path = "/factories/{id}/sync.json".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(factory_sync_body)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FactorySync')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FlipApi#toggle_factory_sync\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Updates an Encoding
    # 
    # @param id Id of an Encoding.
    # @param factory_id Id of a Factory.
    # @param update_encoding_body 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :screenshots Determines whether the response will include screenshots. By default this is not set.
    # @option opts [BOOLEAN] :precise_status Determines whether the response will include a precise status. By default this is not set.
    # @return [Encoding]
    def update_encoding(id, factory_id, update_encoding_body, opts = {})
      data, _status_code, _headers = update_encoding_with_http_info(id, factory_id, update_encoding_body, opts)
      return data
    end

    # Updates an Encoding
    # 
    # @param id Id of an Encoding.
    # @param factory_id Id of a Factory.
    # @param update_encoding_body 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :screenshots Determines whether the response will include screenshots. By default this is not set.
    # @option opts [BOOLEAN] :precise_status Determines whether the response will include a precise status. By default this is not set.
    # @return [Array<(Encoding, Fixnum, Hash)>] Encoding data, response status code and response headers
    def update_encoding_with_http_info(id, factory_id, update_encoding_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FlipApi.update_encoding ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling FlipApi.update_encoding"
      end
      # verify the required parameter 'factory_id' is set
      if @api_client.config.client_side_validation && factory_id.nil?
        fail ArgumentError, "Missing the required parameter 'factory_id' when calling FlipApi.update_encoding"
      end
      # verify the required parameter 'update_encoding_body' is set
      if @api_client.config.client_side_validation && update_encoding_body.nil?
        fail ArgumentError, "Missing the required parameter 'update_encoding_body' when calling FlipApi.update_encoding"
      end
      # resource path
      local_var_path = "/encodings/{id}.json".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'factory_id'] = factory_id
      query_params[:'screenshots'] = opts[:'screenshots'] if !opts[:'screenshots'].nil?
      query_params[:'precise_status'] = opts[:'precise_status'] if !opts[:'precise_status'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(update_encoding_body)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Encoding')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FlipApi#update_encoding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Updates a Factory's settings. Returns a Factory object.
    # 
    # @param id id of the factory
    # @param update_factory_body 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :with_storage_provider if set to &#x60;true&#x60;, results will include a storage provider&#39;s id
    # @return [Factory]
    def update_factory(id, update_factory_body, opts = {})
      data, _status_code, _headers = update_factory_with_http_info(id, update_factory_body, opts)
      return data
    end

    # Updates a Factory&#39;s settings. Returns a Factory object.
    # 
    # @param id id of the factory
    # @param update_factory_body 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :with_storage_provider if set to &#x60;true&#x60;, results will include a storage provider&#39;s id
    # @return [Array<(Factory, Fixnum, Hash)>] Factory data, response status code and response headers
    def update_factory_with_http_info(id, update_factory_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FlipApi.update_factory ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling FlipApi.update_factory"
      end
      # verify the required parameter 'update_factory_body' is set
      if @api_client.config.client_side_validation && update_factory_body.nil?
        fail ArgumentError, "Missing the required parameter 'update_factory_body' when calling FlipApi.update_factory"
      end
      # resource path
      local_var_path = "/factories/{id}.json".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'with_storage_provider'] = opts[:'with_storage_provider'] if !opts[:'with_storage_provider'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(update_factory_body)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Factory')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FlipApi#update_factory\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Updates a Factory's notification settings.
    # 
    # @param factory_id Id of a Factory.
    # @param cloud_notification_settings_body 
    # @param [Hash] opts the optional parameters
    # @return [CloudNotificationSettings]
    def update_notifications(factory_id, cloud_notification_settings_body, opts = {})
      data, _status_code, _headers = update_notifications_with_http_info(factory_id, cloud_notification_settings_body, opts)
      return data
    end

    # Updates a Factory&#39;s notification settings.
    # 
    # @param factory_id Id of a Factory.
    # @param cloud_notification_settings_body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CloudNotificationSettings, Fixnum, Hash)>] CloudNotificationSettings data, response status code and response headers
    def update_notifications_with_http_info(factory_id, cloud_notification_settings_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FlipApi.update_notifications ..."
      end
      # verify the required parameter 'factory_id' is set
      if @api_client.config.client_side_validation && factory_id.nil?
        fail ArgumentError, "Missing the required parameter 'factory_id' when calling FlipApi.update_notifications"
      end
      # verify the required parameter 'cloud_notification_settings_body' is set
      if @api_client.config.client_side_validation && cloud_notification_settings_body.nil?
        fail ArgumentError, "Missing the required parameter 'cloud_notification_settings_body' when calling FlipApi.update_notifications"
      end
      # resource path
      local_var_path = "/notifications.json"

      # query parameters
      query_params = {}
      query_params[:'factory_id'] = factory_id

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(cloud_notification_settings_body)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CloudNotificationSettings')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FlipApi#update_notifications\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Updates a given Profile
    # 
    # @param id 
    # @param factory_id Id of a Factory.
    # @param update_profile_body 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :exclude_advanced_services 
    # @option opts [BOOLEAN] :expand If expand option is set Profile objects will contain all command parameters, even if their value is default. By default this is not set.
    # @return [Profile]
    def update_profile(id, factory_id, update_profile_body, opts = {})
      data, _status_code, _headers = update_profile_with_http_info(id, factory_id, update_profile_body, opts)
      return data
    end

    # Updates a given Profile
    # 
    # @param id 
    # @param factory_id Id of a Factory.
    # @param update_profile_body 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :exclude_advanced_services 
    # @option opts [BOOLEAN] :expand If expand option is set Profile objects will contain all command parameters, even if their value is default. By default this is not set.
    # @return [Array<(Profile, Fixnum, Hash)>] Profile data, response status code and response headers
    def update_profile_with_http_info(id, factory_id, update_profile_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FlipApi.update_profile ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling FlipApi.update_profile"
      end
      # verify the required parameter 'factory_id' is set
      if @api_client.config.client_side_validation && factory_id.nil?
        fail ArgumentError, "Missing the required parameter 'factory_id' when calling FlipApi.update_profile"
      end
      # verify the required parameter 'update_profile_body' is set
      if @api_client.config.client_side_validation && update_profile_body.nil?
        fail ArgumentError, "Missing the required parameter 'update_profile_body' when calling FlipApi.update_profile"
      end
      # resource path
      local_var_path = "/profiles/{id}.json".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'factory_id'] = factory_id
      query_params[:'exclude_advanced_services'] = opts[:'exclude_advanced_services'] if !opts[:'exclude_advanced_services'].nil?
      query_params[:'expand'] = opts[:'expand'] if !opts[:'expand'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(update_profile_body)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Profile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FlipApi#update_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creates an upload session.
    # 
    # @param factory_id Id of a Factory.
    # @param video_upload_body 
    # @param [Hash] opts the optional parameters
    # @return [UploadSession]
    def upload_video(factory_id, video_upload_body, opts = {})
      data, _status_code, _headers = upload_video_with_http_info(factory_id, video_upload_body, opts)
      return data
    end

    # Creates an upload session.
    # 
    # @param factory_id Id of a Factory.
    # @param video_upload_body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UploadSession, Fixnum, Hash)>] UploadSession data, response status code and response headers
    def upload_video_with_http_info(factory_id, video_upload_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FlipApi.upload_video ..."
      end
      # verify the required parameter 'factory_id' is set
      if @api_client.config.client_side_validation && factory_id.nil?
        fail ArgumentError, "Missing the required parameter 'factory_id' when calling FlipApi.upload_video"
      end
      # verify the required parameter 'video_upload_body' is set
      if @api_client.config.client_side_validation && video_upload_body.nil?
        fail ArgumentError, "Missing the required parameter 'video_upload_body' when calling FlipApi.upload_video"
      end
      # resource path
      local_var_path = "/videos/upload.json"

      # query parameters
      query_params = {}
      query_params[:'factory_id'] = factory_id

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(video_upload_body)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UploadSession')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FlipApi#upload_video\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns a Video object.
    # 
    # @param id Id of a Video.
    # @param factory_id Id of a Factory.
    # @param [Hash] opts the optional parameters
    # @return [Video]
    def video(id, factory_id, opts = {})
      data, _status_code, _headers = video_with_http_info(id, factory_id, opts)
      return data
    end

    # Returns a Video object.
    # 
    # @param id Id of a Video.
    # @param factory_id Id of a Factory.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Video, Fixnum, Hash)>] Video data, response status code and response headers
    def video_with_http_info(id, factory_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FlipApi.video ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling FlipApi.video"
      end
      # verify the required parameter 'factory_id' is set
      if @api_client.config.client_side_validation && factory_id.nil?
        fail ArgumentError, "Missing the required parameter 'factory_id' when calling FlipApi.video"
      end
      # resource path
      local_var_path = "/videos/{id}.json".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'factory_id'] = factory_id

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Video')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FlipApi#video\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns a list of Encodings that belong to a Video.
    # 
    # @param id Id of a Video.
    # @param factory_id Id of a Factory.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page A page to be fetched. Default is &#x60;1&#x60;.
    # @option opts [Integer] :per_page A number of results per page. Default is &#x60;100&#x60;.
    # @option opts [BOOLEAN] :screenshots Determines whether the response will include screenshots. By default this is not set.
    # @option opts [BOOLEAN] :precise_status Determines whether the response will include a precise status. By default this is not set.
    # @return [PaginatedEncodingsCollection]
    def video_encodings(id, factory_id, opts = {})
      data, _status_code, _headers = video_encodings_with_http_info(id, factory_id, opts)
      return data
    end

    # Returns a list of Encodings that belong to a Video.
    # 
    # @param id Id of a Video.
    # @param factory_id Id of a Factory.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page A page to be fetched. Default is &#x60;1&#x60;.
    # @option opts [Integer] :per_page A number of results per page. Default is &#x60;100&#x60;.
    # @option opts [BOOLEAN] :screenshots Determines whether the response will include screenshots. By default this is not set.
    # @option opts [BOOLEAN] :precise_status Determines whether the response will include a precise status. By default this is not set.
    # @return [Array<(PaginatedEncodingsCollection, Fixnum, Hash)>] PaginatedEncodingsCollection data, response status code and response headers
    def video_encodings_with_http_info(id, factory_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FlipApi.video_encodings ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling FlipApi.video_encodings"
      end
      # verify the required parameter 'factory_id' is set
      if @api_client.config.client_side_validation && factory_id.nil?
        fail ArgumentError, "Missing the required parameter 'factory_id' when calling FlipApi.video_encodings"
      end
      # resource path
      local_var_path = "/videos/{id}/encodings.json".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'factory_id'] = factory_id
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'screenshots'] = opts[:'screenshots'] if !opts[:'screenshots'].nil?
      query_params[:'precise_status'] = opts[:'precise_status'] if !opts[:'precise_status'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PaginatedEncodingsCollection')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FlipApi#video_encodings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns a Video's metadata
    # 
    # @param id Id of a Video.
    # @param factory_id Id of a Factory.
    # @param [Hash] opts the optional parameters
    # @return [VideoMetadata]
    def video_metadata(id, factory_id, opts = {})
      data, _status_code, _headers = video_metadata_with_http_info(id, factory_id, opts)
      return data
    end

    # Returns a Video&#39;s metadata
    # 
    # @param id Id of a Video.
    # @param factory_id Id of a Factory.
    # @param [Hash] opts the optional parameters
    # @return [Array<(VideoMetadata, Fixnum, Hash)>] VideoMetadata data, response status code and response headers
    def video_metadata_with_http_info(id, factory_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FlipApi.video_metadata ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling FlipApi.video_metadata"
      end
      # verify the required parameter 'factory_id' is set
      if @api_client.config.client_side_validation && factory_id.nil?
        fail ArgumentError, "Missing the required parameter 'factory_id' when calling FlipApi.video_metadata"
      end
      # resource path
      local_var_path = "/videos/{id}/metadata.json".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'factory_id'] = factory_id

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'VideoMetadata')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FlipApi#video_metadata\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns a collection of Video objects.
    # 
    # @param factory_id Id of a Factory.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page A page to be fetched. Default is &#x60;1&#x60;.
    # @option opts [Integer] :per_page A number of results per page. Default is &#x60;100&#x60;.
    # @return [PaginatedVideoCollection]
    def videos(factory_id, opts = {})
      data, _status_code, _headers = videos_with_http_info(factory_id, opts)
      return data
    end

    # Returns a collection of Video objects.
    # 
    # @param factory_id Id of a Factory.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page A page to be fetched. Default is &#x60;1&#x60;.
    # @option opts [Integer] :per_page A number of results per page. Default is &#x60;100&#x60;.
    # @return [Array<(PaginatedVideoCollection, Fixnum, Hash)>] PaginatedVideoCollection data, response status code and response headers
    def videos_with_http_info(factory_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FlipApi.videos ..."
      end
      # verify the required parameter 'factory_id' is set
      if @api_client.config.client_side_validation && factory_id.nil?
        fail ArgumentError, "Missing the required parameter 'factory_id' when calling FlipApi.videos"
      end
      # resource path
      local_var_path = "/videos.json"

      # query parameters
      query_params = {}
      query_params[:'factory_id'] = factory_id
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PaginatedVideoCollection')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FlipApi#videos\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns a collection of Workflows that belong to a Factory.
    # 
    # @param factory_id Id of a Factory.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page A page to be fetched. Default is &#x60;1&#x60;.
    # @option opts [Integer] :per_page A number of results per page. Default is &#x60;100&#x60;.
    # @return [PaginatedWorkflowsCollection]
    def workflows(factory_id, opts = {})
      data, _status_code, _headers = workflows_with_http_info(factory_id, opts)
      return data
    end

    # Returns a collection of Workflows that belong to a Factory.
    # 
    # @param factory_id Id of a Factory.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page A page to be fetched. Default is &#x60;1&#x60;.
    # @option opts [Integer] :per_page A number of results per page. Default is &#x60;100&#x60;.
    # @return [Array<(PaginatedWorkflowsCollection, Fixnum, Hash)>] PaginatedWorkflowsCollection data, response status code and response headers
    def workflows_with_http_info(factory_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FlipApi.workflows ..."
      end
      # verify the required parameter 'factory_id' is set
      if @api_client.config.client_side_validation && factory_id.nil?
        fail ArgumentError, "Missing the required parameter 'factory_id' when calling FlipApi.workflows"
      end
      # resource path
      local_var_path = "/workflows.json"

      # query parameters
      query_params = {}
      query_params[:'factory_id'] = factory_id
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PaginatedWorkflowsCollection')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FlipApi#workflows\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
